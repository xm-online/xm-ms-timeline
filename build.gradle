import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.sonarqube"
    id "org.liquibase.gradle"
    id "checkstyle"
    id "war"
    id "com.github.spotbugs"
    id "pmd"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.icthh.xm.ms.timeline"

description = ""

sourceCompatibility=11
targetCompatibility=11
assert System.properties["java.specification.version"] == "11" || "12" || "13"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/version.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// See https://virgo47.wordpress.com/2018/09/14/classpath-too-long-with-spring-boot-and-gradle/ for details
// https://github.com/jhipster/generator-jhipster/issues/9713
if (OperatingSystem.current().isWindows()) {
    task classpathJar(type: Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveFileName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.main.runtimeClasspath.files
                attributes "Class-Path": classpath.collect {f -> f.toURI().toString()}.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "com.icthh.xm.ms.timeline.TimelineApp"
}

bootWar {
    mainClassName = "com.icthh.xm.ms.timeline.TimelineApp"
    manifest {
        attributes(
            "Implementation-Version": archiveVersion
        )
    }
}

test {
    useJUnitPlatform()
    systemProperty "spring.profiles.active", "test"
    include '**/*UnitTest*'
    include '**/*IntTest*'

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
    testLogging {
        events = ["passed", "failed", "skipped"]
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

task cucumberTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include '**/CucumberTest*'

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn cucumberTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}


checkstyle {
    toolVersion = "${checkstyle_tool_version}"
    ignoreFailures = true
    configFile = rootProject.file('./qa/checkstyle.xml')
}

spotbugs {
    ignoreFailures = true
}

pmd {
    rulePriority = 3
    toolVersion = "${pmd_tool_version}"
    ignoreFailures = true
    ruleSetFiles = files("./qa/pmd.xml")
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = 'src/main/resources/config/liquibase/changelog/' + new Date().format('yyyyMMddHHmmss') + '_changelog.xml'

liquibase {
    activities {
        main {
            driver ''
            url ''
            username 'timeline'
            password ''
            changeLogFile 'src/main/resources/config/liquibase/master.xml'
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
        diffLog {
            driver ''
            url ''
            username 'timeline'
            password ''
            changeLogFile project.ext.diffChangelogFile
            referenceUrl 'hibernate:spring:com.icthh.xm.ms.timeline.domain?dialect=&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
    }

    runList = project.ext.runList
}
configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://repo.maven.apache.org/maven2' }
}

dependencies {
    // import JHipster dependencies BOM
    implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}" )

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "io.github.jhipster", name: "jhipster-framework"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.dropwizard.metrics:metrics-json"
    implementation "io.dropwizard.metrics:metrics-jvm"
    implementation "io.dropwizard.metrics:metrics-servlet"
    implementation "io.dropwizard.metrics:metrics-servlets"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "commons-codec:commons-codec"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.liquibase:liquibase-core"
    implementation "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    implementation "com.zaxxer:HikariCP:${hikaricp_version}"
    implementation "org.postgresql:postgresql"
    implementation "com.h2database:h2"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime "org.postgresql:postgresql"
    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    implementation "org.springframework.boot:spring-boot-starter-data-cassandra"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web"
    implementation "com.datastax.cassandra:cassandra-driver-extras"
    implementation "com.datastax.cassandra:cassandra-driver-mapping"
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"
    implementation "org.springframework.cloud:spring-cloud-security"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security.oauth:spring-security-oauth2"
    implementation "org.springframework.security:spring-security-jwt"
    runtimeOnly "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    implementation ("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }

    // XM custom dependencies
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    implementation "com.builtamont:cassandra-migration:${casandra_migration}"
    implementation "net.sf.uadetector:uadetector-resources:${uadetector}"

    implementation "com.icthh.xm.commons:xm-commons-security:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-logging-web:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-tenant-endpoint:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-migration-db:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"

    // test dependencies
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation ("org.cassandraunit:cassandra-unit-spring") {
        exclude(group: "org.slf4j")
    }
    testImplementation "io.cucumber:cucumber-junit"
    testImplementation "io.cucumber:cucumber-spring"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

    testImplementation "com.h2database:h2"
    // this dependencies is needed for supporting cassandra on 11 java
    testImplementation "com.github.jbellis:jamm:0.3.2"
}

// 1. fix of issue with cassandra-all library that uses non-existent Guava classes
// https://issues.apache.org/jira/browse/CASSANDRA-15245
configurations.all {
    resolutionStrategy {
        force "com.google.guava:guava:25.1-jre"
        force "com.google.guava:guava-gwt:25.1-jre"
    }
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.0.1"
}

bootWar.dependsOn war
compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
